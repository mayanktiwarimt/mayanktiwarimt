name: Update Languages Used

on:
  schedule:
    - cron: "0 0 * * 0" # weekly on Sunday UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-languages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install node-fetch@2 cheerio

      - name: Fetch languages and update README
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fetch = require('node-fetch');
            const cheerio = require('cheerio');

            const githubUser = 'mayanktiwarimt';        // your GitHub username
            const leetcodeUser = 'begineercoder';       // leetcode handle
            const cfUser = 'beginner.coder_mtr';        // codeforces handle
            const gfgUser = 'mayanktiwarimtr';         // gfg handle

            async function getGitHubLangs() {
              const repos = await github.paginate(github.rest.repos.listForUser, { username: githubUser, per_page: 100 });
              let langCount = {};
              for (const repo of repos) {
                try {
                  const langs = await github.request(`GET /repos/${githubUser}/${repo.name}/languages`);
                  for (const [lang, bytes] of Object.entries(langs.data)) {
                    langCount[lang] = (langCount[lang] || 0) + bytes;
                  }
                } catch (e) {
                  // skip repos we can't access
                }
              }
              return langCount;
            }

            async function getCF() {
              try {
                const res = await fetch(`https://codeforces.com/api/user.status?handle=${cfUser}`);
                const data = await res.json();
                let langs = {};
                if (data.status === 'OK') {
                  data.result.forEach(sub => {
                    const l = sub.programmingLanguage;
                    langs[l] = (langs[l] || 0) + 1;
                  });
                }
                return langs;
              } catch {
                return {};
              }
            }

            async function getLeetCode() {
              try {
                const res = await fetch(`https://alfa-leetcode-api.onrender.com/${leetcodeUser}/languages`);
                if (!res.ok) return {};
                const data = await res.json();
                let langs = {};
                data.forEach(item => {
                  const name = item.languageName || item.name || item.language;
                  const val = item.problemsSolved || item.count || 0;
                  if (name) langs[name] = (langs[name] || 0) + val;
                });
                return langs;
              } catch {
                return {};
              }
            }

            async function getGFG() {
              try {
                const res = await fetch(`https://www.geeksforgeeks.org/user/${gfgUser}/`);
                const html = await res.text();
                const $ = cheerio.load(html);
                let langs = {};
                $('span:contains("Language:")').each((_, el) => {
                  const lang = $(el).text().replace('Language:', '').trim();
                  if (lang) langs[lang] = (langs[lang] || 0) + 1;
                });
                return langs;
              } catch {
                return {};
              }
            }

            function mergeLangs(...langObjs) {
              let total = {};
              for (const obj of langObjs) {
                for (const [lang, count] of Object.entries(obj)) {
                  total[lang] = (total[lang] || 0) + count;
                }
              }
              return total;
            }

            function addLogo(lang) {
              const logos = {
                'Python': '<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/python/python-original.svg" width="20" alt="Python" />',
                'C++': '<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/cplusplus/cplusplus-original.svg" width="20" alt="C++" />',
                'C': '<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/c/c-original.svg" width="20" alt="C" />',
                'Java': '<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/java/java-original.svg" width="20" alt="Java" />',
                'JavaScript': '<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg" width="20" alt="JavaScript" />'
              };
              return `${logos[lang] || ''} ${lang}`;
            }

            const gh = await getGitHubLangs();
            const cf = await getCF();
            const lc = await getLeetCode();
            const gfg = await getGFG();

            const merged = mergeLangs(gh, cf, lc, gfg);
            const totalCount = Object.values(merged).reduce((a,b) => a+b, 0) || 1;
            const sorted = Object.entries(merged).sort((a,b) => b[1]-a[1]);

            // Create markdown table with logos
            let table = "| Language | Usage |\n|---:|:---|\n";
            for (const [lang, count] of sorted) {
              const pct = ((count/totalCount)*100).toFixed(2);
              table += `| ${addLogo(lang)} | ${pct}% |\n`;
            }
            if (sorted.length === 0) table += "| â€” | No data available |\n";

            // Update README
            const { data: readme } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'README.md'
            });

            const content = Buffer.from(readme.content, 'base64').toString('utf8');
            const start = '<!-- LANGUAGES_USED -->';
            const end = '<!-- LANGUAGES_USED_END -->';
            if (!content.includes(start) || !content.includes(end)) {
              core.setFailed('README markers not found. Add <!-- LANGUAGES_USED --> markers to README.md');
            }
            const before = content.split(start)[0];
            const after = content.split(end)[1] || '';
            const newBlock = `${start}\n${table}\n${end}`;
            const newContent = before + newBlock + after;

            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'README.md',
              message: 'chore: update languages used',
              content: Buffer.from(newContent).toString('base64'),
              sha: readme.sha
            });
